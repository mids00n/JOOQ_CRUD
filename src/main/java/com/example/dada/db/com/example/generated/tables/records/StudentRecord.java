/*
 * This file is generated by jOOQ.
 */
package com.example.generated.tables.records;


import com.example.generated.tables.Student;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentRecord extends UpdatableRecordImpl<StudentRecord> implements Record4<String, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.student.first_name</code>.
     */
    public StudentRecord setFirstName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.student.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.student.middle_name</code>.
     */
    public StudentRecord setMiddleName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.student.middle_name</code>.
     */
    public String getMiddleName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.student.last_name</code>.
     */
    public StudentRecord setLastName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.student.last_name</code>.
     */
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.student.id</code>.
     */
    public StudentRecord setId(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.student.id</code>.
     */
    public Integer getId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Student.STUDENT.FIRST_NAME;
    }

    @Override
    public Field<String> field2() {
        return Student.STUDENT.MIDDLE_NAME;
    }

    @Override
    public Field<String> field3() {
        return Student.STUDENT.LAST_NAME;
    }

    @Override
    public Field<Integer> field4() {
        return Student.STUDENT.ID;
    }

    @Override
    public String component1() {
        return getFirstName();
    }

    @Override
    public String component2() {
        return getMiddleName();
    }

    @Override
    public String component3() {
        return getLastName();
    }

    @Override
    public Integer component4() {
        return getId();
    }

    @Override
    public String value1() {
        return getFirstName();
    }

    @Override
    public String value2() {
        return getMiddleName();
    }

    @Override
    public String value3() {
        return getLastName();
    }

    @Override
    public Integer value4() {
        return getId();
    }

    @Override
    public StudentRecord value1(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public StudentRecord value2(String value) {
        setMiddleName(value);
        return this;
    }

    @Override
    public StudentRecord value3(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public StudentRecord value4(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public StudentRecord values(String value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudentRecord
     */
    public StudentRecord() {
        super(Student.STUDENT);
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    public StudentRecord(String firstName, String middleName, String lastName, Integer id) {
        super(Student.STUDENT);

        setFirstName(firstName);
        setMiddleName(middleName);
        setLastName(lastName);
        setId(id);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StudentRecord
     */
    public StudentRecord(com.example.generated.tables.pojos.Student value) {
        super(Student.STUDENT);

        if (value != null) {
            setFirstName(value.getFirstName());
            setMiddleName(value.getMiddleName());
            setLastName(value.getLastName());
            setId(value.getId());
            resetChangedOnNotNull();
        }
    }
}
